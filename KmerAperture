#!/usr/bin/env python3
import pandas as pd
import numpy as np
import screed
import random
import time
import argparse
import sys
import itertools
from itertools import repeat
import math
from utils import canon, build_kmers, read_kmers_from_file, compl
from utils import get_uniques, get_ranges, get_indices, rangedict
from collections import Counter
from Bio.Seq import reverse_complement
import os, re
import subprocess
import json
from concurrent.futures import ProcessPoolExecutor
dir_path = str(os.path.dirname(os.path.realpath(__file__)))


def add_args(a):
    parser = argparse.ArgumentParser(description="KmerAperture")
    parser.add_argument(
        "--fastas",
        "-f",
        help="Path to directory containing fastas for analysis",
        required=True,
    )
    parser.add_argument(
        "--reference",
        "-r",
        help="Reference genome for comparison",
        required=True,
    )
    parser.add_argument(
        "--kmersize",
        "-k",
        help="k-mer size (k). Must be an odd number",
        type=int,
        default=31,
        required=False,
    )
    parser.add_argument(
        "--pyonly",
        "-py",
        help="Run KmerAperture in python only. Slower than using the ocaml parser",
        default=False,
        action='store_true',
    )
    parser.add_argument(
        "--proc",
        "-p",
        help="Number of processes. Default: 1",
        type=int,
        default=1
    )
    #parser.add_argument(
    #    "--snpsonly",
    #    help="Run to extract SNPs and alignment only for speed",
    #    type=int,
    #    default=1
    #)
    args = parser.parse_args(a)
    return args

def get_accessory(kmer1ranges, ksize):
    '''
    Find contiguous kmer series indicative of SNPs
    or accessory
    '''
    allSNPranges = []
    accranges=[]
    for pair in kmer1ranges:
        rangediff = pair[1] - pair[0]
        if rangediff == ksize:
            allSNPranges.append(pair)
        if (rangediff>(ksize)):
            accranges.append(pair)
    return allSNPranges, accranges

def mappability(kmer2set, kmer1set, kmers1, kmers2):
    '''
    For exact k-mers find repeats present in each genome
    and not the other
    '''
    inter = kmer1set.intersection(kmer2set)
    ck1 = Counter([i for i in kmers1 if i in inter])
    ck2 = Counter([i for i in kmers2 if i in inter])
    c1u = (ck1 - ck2)
    c2u = (ck2 - ck1)

    refrepeats = sum(c1u.values())
    queryrepeats = sum(c2u.values())
    queryrepkmers = []
    for keys in list(ck1.keys()):
        if ck1.get(keys) > 1:
            queryrepkmers.append(keys)
    refrepkmers = []
    for keys in list(ck2.keys()):
        if ck2.get(keys) > 1:
            queryrepkmers.append(keys)

    return refrepeats, queryrepeats, queryrepkmers, refrepkmers

def assert_kmer(kmerranges, k, kmers2):
    '''
    Match middle k-mers with middle base removed
    for both possible strands
    '''
    klist = []
    positiondict ={}
    for pair in kmerranges:
        kp=[]
        startpos = pair[0]
        endpos = pair[1]
        kgap = int((k-1)/2)
        km = kmers2[startpos+kgap]
        km_rc = screed.rc(km)
        mkmer0 = km[:kgap] + km[kgap+1:]
        mkmer1 = km_rc[:kgap] + km_rc[kgap+1:]
        klist.extend([mkmer0, mkmer1])

        positiondict[mkmer0] = (startpos+k) #Should be -1, but SNP positions are 1 indexed
        positiondict[mkmer1] = (startpos+k) #-1
    return(klist, positiondict)


def get_SNPs(middlekinter, klist1pos, klist2pos, sequence, qfilename, refdict):
    '''
    Find and extract SNPs estimated by KmerAperture
    '''
    querydict = {}
    sequence=''
    for record in screed.open(reference):
        sequence += record.sequence
    qsequence =''
    for record in screed.open(qfilename):
        qsequence += record.sequence

    for mkmer in list(middlekinter):
        refpos = klist1pos.get(mkmer)
        refseq = sequence[refpos-5:refpos+4]
        querypos = klist2pos.get(mkmer)
        queryseq = qsequence[querypos-5:querypos+4]
        rcseq = screed.rc(queryseq)
        km = queryseq[:4]+queryseq[5:]
        refkm = refseq[:4]+refseq[5:]
        rckm=rcseq[:4]+rcseq[5:]
        SNP=''
        if km == refkm:
            SNP=queryseq[4]
        elif rckm == refkm:
            SNP=rcseq[4]
        refbase = refseq[4]

        refdict[refpos] = refbase
        querydict[refpos] = SNP

    return(querydict, refdict)


def filter_accessory_positions(accranges, denseranges, repranges, ksize):
    '''
    For all k-mer series >k assume they're query-accessory
    Filter out those that instead represent dense SNPs or indels
    '''

    denseranges.extend(repranges)
    acconly =[]
    for ranges in accranges:
        if ranges not in denseranges:
            acconly.append(ranges)

    acclength =0
    for ranges in acconly:
        rangediff = ranges[1]-ranges[0]
        alength=((rangediff-ksize)+1)
        if alength>50:
            acclength+=alength
    return(acconly, acclength)


def find_dense_SNP2(kmer2ranges, kmer1ranges, k, kmers2, kmers1, reference, qfilename):

    '''
    Find contiguous kmer series from size k to n(k-1)+1
    (n = upperboundSNP)
    Extract full sequence and pattern match SNPs for count and extract
    '''

    rdict ={}
    qdict ={}

    SNPs = 0
    denseSNP_L = 0

    denseranges = []
    denseranges_ref = []

    sequence=''
    for record in screed.open(reference):
        sequence += record.sequence
    qsequence =''
    for record in screed.open(qfilename):
        qsequence += record.sequence


    upperboundSNP = 100
    ks = k#+2
    ke = (upperboundSNP *(k-1)) + 1
    for L in range(ks, ke):
        k2_L_ranges = []
        k1_L_ranges = []
        for pair, pair2 in zip(kmer1ranges, kmer2ranges):
            rangediff1 = pair[1] - pair[0]
            if rangediff1 == L:
                k1_L_ranges.append(pair[0])
            rangediff2 = pair2[1] - pair2[0]
            if rangediff2 == L:
                k2_L_ranges.append(pair2[0])

        Lseqlen = L+(k-1)
        aseqs = []
        bseqs = []
        cseqs = []
        for pos in k1_L_ranges:
            exseq=''
            rcexseq=''
            exseq = sequence[pos:pos+Lseqlen]
            rcexseq = str(reverse_complement(exseq))
            aseqs.extend([exseq]) #, rcexseq])
        for pos in k2_L_ranges:
            exseq=''
            rcexseq=''
            exseq = qsequence[pos:pos+Lseqlen]
            rcexseq = str(reverse_complement(exseq))
            bseqs.extend([exseq])#, rcexseq])
            cseqs.append(rcexseq)

        pairsreg = list(itertools.product(aseqs, bseqs))
        pairsRC = list(itertools.product(aseqs, cseqs))

        pairsdict = {}
        pairsdict['reg'] = pairsreg
        pairsdict['rc'] = pairsRC

        for key in pairsdict:
            pairs_seqs = pairsdict.get(key)
            for pairseq in pairs_seqs:
                if len(pairseq) > 1:
                    pmindex = []
                    pmindex = sorted([index for index, elem in enumerate(pairseq[0]) if elem != pairseq[1][index]])

                    #if (len(pmindex)/len(pairseq[0])) <0.16:
                    indels = any(pmindex[i] + 1 == pmindex[i + 1] for i in range(len(pmindex) - 1)) #Check for consecutive SNPs (indels)
                    if not indels:
                        ri = sequence.find(pairseq[0])
                        if key == 'reg':
                            qi = qsequence.find((pairseq[1]))
                        if key =='rc':
                            qi = qsequence.find(str(reverse_complement(pairseq[1])))

                        if (ri != -1) and (qi != -1):
                            ri+=k
                            qi+=k
                            #denseranges.append((qi-k, qi+k+1))
                            #denseranges_ref.append((ri-k, ri+k+1))
                            denseranges.append((qi-k, (qi+L)-k))
                            denseranges_ref.append((ri-k, (ri+L)-k))


                            #snpdiffs = list(np.diff(pmindex))
                            rb = sequence[ri-1]
                            qb = qsequence[qi-1]
                            if key =='rc':
                                qb = compl(qb)
                            rdict[ri] = rb
                            qdict[ri] = qb

                            if len(pmindex) > 1:
                                count=0
                                for x in pmindex:
                                    qb = pairseq[1][x]
                                    if count>0:
                                        #Successive positions
                                        prior = count -1
                                        z = pmindex[count] - pmindex[0]
                                        qdict[ri+z] = qb
                                        count+=1
                                    else:
                                        #First position
                                        qdict[ri] = qb
                                        count+=1


                            #denseSNP_L += (Lseqlen+1)
    return(rdict, qdict, denseSNP_L, denseranges, denseranges_ref)


#def get_indels(kmer2ranges, k, kmers2, kmers1):
#    '''
#    Match kmers flanking series in alternate genome(s)
#    if they're contiguous in alternate
#    '''
#
#    totalins = 0
#    insdict = {}
#    insranges = []
#    totalinsbp = 0
#
#    for pair2 in kmer2ranges:
#        rangediff2 = pair2[1] - pair2[0]
#        if (rangediff2 >= (k+2)) and (rangediff2 <= (k+49)):
#            try:
#                kmer1 = kmers2[pair2[0]-1]
#                kmer2 = kmers2[pair2[1]]
#                refpos = get_indices([kmer1, kmer2], kmers1)
#                if (refpos[0] + k +1) == (refpos[1]):
#                    indelsize = (rangediff2-k)+1
#                    totalinsbp += indelsize
#                    totalins+=1
#                    insranges.append(pair2)
#            except:
#                continue
#    return totalins, insdict, insranges, totalinsbp


def run_KmerAperture(gList, reference, ksize, pyonly, kmers1, kmer1set):

    results=[]
    querynamedict = {}
    refdict = {}
    querynamedict_wgaps = {}
    refacclists = []
    queryaccdict = {}

    for genome2 in gList:
        if pyonly:
            kmers2 = read_kmers_from_file(genome2, ksize)
        else:
            proc = subprocess.Popen([ocamlparser, genome2, str(ksize), '-c'], stdout=subprocess.PIPE, encoding='utf8')
            kmers2 = proc.stdout.read().split()
        print(f'Extracting SNPs from {genome2} k-mer series')
        kmers2_=[]
        for kmer in kmers2:
            if not 'N' in kmer:
                kmers2_.append(kmer)
        kmer2set=set(kmers2_)


        kmer2uniq = get_uniques(kmer2set, kmer1set)
        kmer2indices = get_indices(kmer2uniq, kmers2)
        kmer2indices.sort()
        kmer2ranges = get_ranges(kmer2indices)
        kmer2ranges_= list(kmer2ranges)
        SNPranges2, accranges2 = get_accessory(kmer2ranges_, ksize)

        kmer1uniq = get_uniques(kmer1set, kmer2set)
        kmer1indices = get_indices(kmer1uniq, kmers1)
        kmer1indices.sort()
        kmer1ranges = get_ranges(kmer1indices)
        kmer1ranges_= list(kmer1ranges)
        SNPranges1, accranges1 = get_accessory(kmer1ranges_, ksize)

        rdict,qdict,denseSNP_L,denseranges,denseranges_ref = find_dense_SNP2(kmer2ranges_,kmer1ranges_,ksize,kmers2,kmers1,reference,genome2)

        klist2, klist2pos = assert_kmer(SNPranges2, ksize, kmers2)
        klist1, klist1pos = assert_kmer(SNPranges1, ksize, kmers1)
        middlekinter = set(klist1).intersection(set(klist2))
        oqdict, ordict= get_SNPs(middlekinter, klist1pos, klist2pos, reference, genome2, refdict)

        #Now get repeat-only ranges to filter later. All repeat-accessory kmers should be in combined kmer series
        refrepeats, queryrepeats, queryrepetitivekmers, refrepetitivekmers = mappability(kmer2set, kmer1set, kmers1, kmers2)
        queryrep_i = get_indices(set(queryrepetitivekmers), kmers2)
        queryrep_i.sort()
        queryrep_r_ = get_ranges(queryrep_i)
        queryrep_r=list(queryrep_r_)
        refrep_i = get_indices(set(refrepetitivekmers), kmers2)
        refrep_i.sort()
        refrep_r_ = get_ranges(refrep_i)
        refrep_r=list(refrep_r_)

        #Repeat all with repetitive kmers
        kmer2uniq = get_uniques(kmer2set, kmer1set)
        kmer2uniq = kmer2uniq.union(set(queryrepetitivekmers))
        kmer2indices = get_indices(kmer2uniq, kmers2)
        kmer2indices.sort()
        kmer2ranges = get_ranges(kmer2indices)
        kmer2ranges_= list(kmer2ranges)
        SNPranges2_, accranges2 = get_accessory(kmer2ranges_, ksize)

        kmer1uniq = get_uniques(kmer1set, kmer2set)
        kmer1uniq = kmer1uniq.union(set(refrepetitivekmers))
        kmer1indices = get_indices(kmer1uniq, kmers1)
        kmer1indices.sort()
        kmer1ranges = get_ranges(kmer1indices)
        kmer1ranges_= list(kmer1ranges)
        SNPranges1_, accranges1 = get_accessory(kmer1ranges_, ksize)

        querydict={}
        refdict.update(rdict)
        querydict.update(qdict)
        querydict.update(oqdict)
        querynamedict[genome2] = querydict
        SNPs = len(querydict)
        gapsdict = rangedict(accranges1)
        #querydict.update(gapsdict) #Bug. silenced for now
        querynamedict_wgaps[genome2] = querydict
        #print(querynamedict)
        #Adjust accessory to not include dense SNPs and indels
        acclength1_=0
        acclength2_=0
        acc2only, acclength2_ = filter_accessory_positions(accranges2, denseranges, queryrep_r, ksize)
        acc1only, acclength1_ = filter_accessory_positions(accranges1, denseranges_ref, refrep_r, ksize)

        queryaccdict[genome2] = acc2only
        refacclists.append(acc1only)

        #numinsertions, insertionsdict, insranges, totalinsbp = get_indels(kmer2ranges_, ksize, kmers2, kmers1)
        #numinsertions=0
        #insranges=[]

        result =f"{genome2},{SNPs},{acclength1_},{acclength2_}\n"
        results.append(result)



    return querynamedict_wgaps, results, queryaccdict

def outputs(refsequencefull, querynamedict_wgaps, queryaccessory):
    '''
    Generate kmeraperture outputs
    '''
    print('\n\nGenerating output...\n')

    outname = 'full_align.align'
    output=open(outname, "w")
    refseq_list = list(refsequencefull)
    for queryname, mutations in querynamedict_wgaps.items():
        queryseq_list = []
        queryseq=''
        queryseq_list = refseq_list.copy()
        for pos, mut in mutations.items():
            pos-=1
            if mut:
                queryseq_list[pos] = mut
        queryseq = ''.join(queryseq_list)
        output.write(f'>{queryname}\n{queryseq}\n')


    #Output Accessory coordinates
    with open('accessory_coords.json', 'w') as f:
        json.dump(queryaccessory, f)

    print('\n\n\nFinished, thanks for using KmerAperture!\n\n\n')

if __name__=='__main__':

    args = add_args(sys.argv[1:])
    reference =args.reference
    genomedir = args.fastas
    kmersize = args.kmersize
    pyonly = args.pyonly
    nproc = args.proc
    #snpsonly = args.snpsonly

    if (kmersize % 2) != 1:
        print('\nPlease enter an odd numbered integer for k\n\nExiting...')
        exit()


    gList =[]
    for filename in os.listdir(genomedir):
        if filename.endswith('.fna') or filename.endswith('.fasta') or filename.endswith('.fas'):
            gList.append(genomedir + filename)

    print(f"Found {len(gList)} genomes for comparison")


    print(f'Reading in reference genome {reference}')
    if pyonly:
        kmers1 = read_kmers_from_file(reference, kmersize)
    else:
        ocamlparser = dir_path+'/parser/KmerApertureParser'
        proc = subprocess.Popen([ocamlparser, reference, str(kmersize), '-c'], stdout=subprocess.PIPE, encoding='utf8')
        kmers1 = proc.stdout.read().split()
    kmers1_=[]
    for kmer in kmers1:
        if not 'N' in kmer:
            kmers1_.append(kmer)
    kmer1set=set(kmers1_)


    outname = f'./{reference}_{kmersize}.csv'
    output=open(outname, "w")
    output.write('gID,SNP,refonlysites,queryonlysites\n')


    if nproc ==1:
        results = run_KmerAperture(
            gList,
            reference,
            kmersize,
            pyonly,
            kmers1,
            kmer1set)

        querynamedict_wgaps = results[0]
        queryaccessory = results[2]
        refsequencefull=''
        for record in screed.open(reference):
            refsequencefull += record.sequence
        outputs(refsequencefull, querynamedict_wgaps, queryaccessory)

        for line in results[1]:
            output.write(f'{line}')


    else:
        chunk_size = int(len(gList) / nproc)
        chunks = [
            gList[i : i + chunk_size]
            for i in range(0, len(gList), chunk_size)
        ]

        querynamedict_wgaps = {}
        queryaccessory = {}
        with ProcessPoolExecutor(nproc) as executor:
            results = list(executor.map(
            run_KmerAperture,
            chunks,
            repeat(reference),
            repeat(kmersize),
            repeat(pyonly),
            repeat(kmers1),
            repeat(kmer1set)
                )
            )
        for r in results:
            querynamedict_wgaps.update(r[0])
            queryaccessory.update(r[2])
            for line in r[1]:
                output.write(line)
                #output.write(f'{r[1][0]}')


        refsequencefull=''
        for record in screed.open(reference):
            refsequencefull += record.sequence
        outputs(refsequencefull, querynamedict_wgaps, queryaccessory)
